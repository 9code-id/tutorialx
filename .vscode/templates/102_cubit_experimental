#provider_generator
#router_generator
#sl_generator
#sl_local_data_source
#sl_remote_data_source
#sl_service
#sl_repository
#sl_use_case
#sl_cubit
#model_detail_generator
#packages: flutter_bloc get_it auto_route
@@@lib/presentation/hyper_example/view/hyper_example_view.dart
import 'package:flutter/material.dart';
import 'package:hyper_ui/core.dart';

@RoutePage()
class HyperExampleView extends StatefulWidget {
  const HyperExampleView({
    super.key,
  });

  @override
  State<HyperExampleView> createState() => _HyperExampleViewState();
}

class _HyperExampleViewState extends State<HyperExampleView> {
  final HyperExampleCubit cubit = GetIt.I<HyperExampleCubit>();

  @override
  void initState() {
    cubit.initState(init: () {
      //--
    });
    WidgetsBinding.instance.addPostFrameCallback(
      (_) => cubit.ready(),
    );
    super.initState();
  }

  @override
  void dispose() {
    cubit.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MultiBlocListener(
      listeners: const [
        HyperExampleListener(),
      ],
      child: BlocSelector<HyperExampleCubit, HyperExampleState,
          bool>(
        selector: (state) => state.loading,
        builder: (context, _) {
          if (cubit.state.loading) {
            return const Center(child: CircularProgressIndicator());
          }

          return Scaffold(
            appBar: AppBar(
              title: const Text("HyperExample"),
              actions: const [],
            ),
            body: SingleChildScrollView(
              padding: const EdgeInsets.all(20.0),
              child: Column(
                children: [
                  Text(
                    "UniqueID: ${UniqueKey()}",
                    style: const TextStyle(
                      fontSize: 18.0,
                    ),
                  ),
                  const SizedBox(
                    height: 12.0,
                  ),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      IconButton(
                        onPressed: cubit.decrement,
                        icon: const Icon(Icons.remove, color: Colors.grey),
                      ),
                      BlocSelector<HyperExampleCubit, HyperExampleState, int>(
                        selector: (state) => state.counter,
                        builder: (context, _) {
                          return Text(
                            "${cubit.state.counter}",
                            style: const TextStyle(
                              fontSize: 20.0,
                              color: Colors.grey,
                            ),
                          );
                        },
                      ),
                      IconButton(
                        onPressed: cubit.increment,
                        icon: const Icon(Icons.add, color: Colors.grey),
                      ),
                    ],
                  ),
                  const SizedBox(
                    height: 12.0,
                  ),
                  ElevatedButton(
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.black,
                      foregroundColor: Colors.white,
                    ),
                    onPressed: () => cubit.initializeData(),
                    child: const Text("Reload"),
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}
---
@@@lib/presentation/hyper_example/state/hyper_example_state.dart
class HyperExampleState  {
  final bool loading;
  final int counter;

  HyperExampleState({
    this.loading = false,
    this.counter = 0,
  });

  HyperExampleState copyWith({
    bool? loading,
    int? counter,
  }) {
    return HyperExampleState(
      loading: loading ?? this.loading,
      counter: counter ?? this.counter,
    );
  }
}

---

@@@lib/presentation/hyper_example/listener/hyper_example_listener.dart
// ignore: depend_on_referenced_packages
import 'package:provider/single_child_widget.dart';
import 'package:hyper_ui/core.dart';

import 'package:flutter/material.dart';

class HyperExampleListener extends SingleChildStatelessWidget {
  const HyperExampleListener({
    super.key,
    super.child,
  });

  @override
  Widget buildWithChild(BuildContext context, Widget? child) {
    return BlocListener<HyperExampleCubit, HyperExampleState>(
      listener: (context, state) {
        
      },
      child: child,
    );
  }
}

---

@@@lib/presentation/hyper_example/cubit/hyper_example_cubit.dart


import 'package:hyper_ui/core.dart';

abstract class HyperExampleCubit extends Cubit<HyperExampleState> {
  HyperExampleCubit(super.state);

  void initState({
    Function? init,
  });

  void dispose();

  void ready();

  void initializeData();

  void increment();
  
  void decrement();
}


---

@@@lib/presentation/hyper_example/cubit/hyper_example_cubit_impl.dart

import 'package:hyper_ui/core.dart';

class HyperExampleCubitImpl extends Cubit<HyperExampleState> implements HyperExampleCubit {
  HyperExampleCubitImpl() : super(HyperExampleState());

  @override
  void initState({
      Function? init,
    }) {
    //initState event
    emit(HyperExampleState());
    init?.call();
    initializeData();
  }

  @override
  void dispose() {
    //dispose event
  }

  @override
  void ready() {
    //ready event
  }

  @override
  void initializeData() async {
   
  }

  @override
  void increment() {

  }

  @override
  void decrement() {

  }
}
  
---
@@@lib/presentation/hyper_example/widget/_
---